{
  "version": 3,
  "sources": ["../code/vec2.ts", "../code/angles.ts", "../code/physics.ts"],
  "sourcesContent": ["export type Vec2Like = Vec2 | number[]\n\nconst FIDELITY = 0.000000001\n\nexport class Vec2 extends Array {\n    dirty: boolean\n\n    constructor(x: number = 0, y: number = 0) {\n        super()\n        this[0] = x\n        this[1] = y\n        this.dirty = true\n    }\n\n    get x() {\n        return this[0]\n    }\n    set x(value: number) {\n        this[0] = value\n        this.dirty = true\n    }\n\n    get y() {\n        return this[1]\n    }\n    set y(value: number) {\n        this[1] = value\n        this.dirty = true\n    }\n\n    set(x: number, y?: number) {\n        this[0] = x\n        this[1] = (typeof y === 'undefined') ? x : y\n        this.dirty = true\n    }\n\n    multiply(multiply: number): Vec2 {\n        this[0] *= multiply\n        this[1] *= multiply\n        this.dirty = true\n        return this\n    }\n\n    divide(divide: number): Vec2 {\n        console.assert(divide !== 0, 'Cannot divide by 0')\n        this[0] /= divide\n        this[1] /= divide\n        this.dirty = true\n        return this\n    }\n\n    negative(): Vec2 {\n        this[0] = -this[0]\n        this[1] = -this[1]\n        this.dirty = true\n        return this\n    }\n\n    normalize(): Vec2 {\n        const magnitude = this.magnitude()\n        if (magnitude === 0) {\n            this[0] = 0\n            this[1] = 0\n            return this\n        } else {\n            return this.divide(magnitude)\n        }\n    }\n\n    magnitude(): number {\n        return Math.sqrt(this[0] * this[0] + this[1] * this[1])\n    }\n\n    angle(): number {\n        return Math.atan2(this[1], this[0])\n    }\n\n    clone() {\n        return new Vec2(this[0], this[1])\n    }\n\n    copy(copy: Vec2Like) {\n        this[0] = copy[0]\n        this[1] = copy[1]\n        this.dirty = true\n    }\n\n    equal(vec: Vec2Like, fidelity = FIDELITY) {\n        return Math.abs(vec[0] - this[0]) <= fidelity && Math.abs(vec[1] - this[1]) <= fidelity\n    }\n\n    direction(angle: number, speed: number) {\n        this[0] = Math.cos(angle) * speed\n        this[1] = Math.sin(angle) * speed\n    }\n\n    isZero(fidelity = FIDELITY) {\n        return this.equal([0, 0], fidelity)\n    }\n\n    static subtract(vec1: Vec2Like, vec2: Vec2Like, result?: Vec2): Vec2 {\n        result = result || new Vec2()\n        result[0] = vec1[0] - vec2[0]\n        result[1] = vec1[1] - vec2[1]\n        return result\n    }\n}", "const DEGREES_TO_RADIANS = Math.PI / 180\nconst RADIANS_TO_DEGREES = 180 / Math.PI\n\nexport function radiansToDegrees(n: number) {\n    return n * RADIANS_TO_DEGREES\n}\n\nexport function degreesToRadians(n: number) {\n    return n * DEGREES_TO_RADIANS\n}\n", "import { Vec2, Vec2Like } from './vec2'\nimport * as angles from './angles'\n\nexport interface IPhysicsOptions {\n    velocity?: Vec2\n    position?: Vec2\n    acceleration?: number\n    maxSpeed?: number\n    state?: PhysicsState\n}\n\nexport enum PhysicsState {\n    rest = 0,\n    accelerating = 1,\n    turning = 2,\n    cruising = 3,\n    stopping = 4,\n}\n\nconst defaultPhysicsOptions: IPhysicsOptions = {\n    velocity: new Vec2(),\n    position: new Vec2(),\n    acceleration: 1,\n    maxSpeed: 5,\n    state: PhysicsState.rest,\n}\n\ninterface IPhysicsTo {\n    angle?: number\n    speed?: number\n    timeLeft?: number\n    velocity: Vec2\n}\n\nexport class Physics {\n    protected options: IPhysicsOptions\n    protected lastRadians = 0\n    protected force = new Vec2()\n    protected cachedAcceleration = new Vec2()\n    protected to: IPhysicsTo = {\n        velocity: new Vec2()\n    }\n\n    constructor(options: IPhysicsOptions) {\n        this.options = { ...defaultPhysicsOptions, ...options }\n    }\n\n    /**\n     * applies a force to change the movement to a different direction and accelerate to maxSpeed in this direction\n     * @param degrees - angle in degrees\n     */\n    accelerateToDegrees(degrees: number, speed: number = this.maxSpeed) {\n        this.accelerateToAngle(angles.degreesToRadians(degrees), speed)\n    }\n\n    /**\n     * applies a force to change the movement to a different direction and accelerate to maxSpeed in this direction\n     * @param radians - angle in radians\n     */\n    accelerateToAngle(radians: number, speed: number = this.maxSpeed) {\n        if (radians !== this.lastRadians) {\n            this.state = PhysicsState.turning\n            this.to.velocity.direction(radians, speed)\n        } else {\n            if (this.speed !== speed) {\n                this.toSpeed(speed)\n            }\n        }\n    }\n\n    /**\n     * accelerate to desired speed in current direction\n     * @param [speed=maxSpeed] - desired speed or maxSpeed\n     */\n    toSpeed(speed: number = this.maxSpeed) {\n        this.to.timeLeft = Math.abs(speed - this.speed) / this.acceleration\n        const angle = this.angle\n        this.cachedAcceleration.x = Math.cos(angle) * this.acceleration\n        this.cachedAcceleration.y = Math.sin(angle) * this.acceleration\n        this.state = PhysicsState.accelerating\n    }\n\n    stop() {\n        this.cachedAcceleration = this.velocity.clone().normalize().negative()\n        this.cachedAcceleration.multiply(this.acceleration)\n        this.to.timeLeft = this.speed / this.acceleration\n        this.state = PhysicsState.stopping\n    }\n\n    protected accelerate(elapsedMs: number) {\n        if (elapsedMs >= this.to.timeLeft) {\n            this.lastRadians = this.velocity.angle()\n            this.velocity.x += this.cachedAcceleration.x * this.to.timeLeft\n            this.velocity.y += this.cachedAcceleration.y * this.to.timeLeft\n            this.to.timeLeft = 0\n            if (this.state === PhysicsState.stopping) {\n                this.state = PhysicsState.rest\n            } else if (this.state === PhysicsState.accelerating) {\n                this.state = PhysicsState.cruising\n            }\n        } else {\n            this.velocity.x += this.cachedAcceleration.x * elapsedMs\n            this.velocity.y += this.cachedAcceleration.y * elapsedMs\n            this.to.timeLeft -= elapsedMs\n        }\n        // console.log(this.speed, this.timeLeft)\n    }\n\n    protected turn(elapsedMs: number) {\n        const delta = Vec2.subtract(this.to.velocity, this.velocity).normalize()\n        if (delta.isZero()) {\n            this.state = PhysicsState.cruising\n        } else {\n            this.velocity.x += delta.x * this.acceleration * elapsedMs\n            this.velocity.y += delta.y * this.acceleration * elapsedMs\n        }\n    }\n\n    update(elapsedMs: number) {\n        switch (this.state) {\n            case PhysicsState.rest:\n                return\n            case PhysicsState.accelerating:\n            case PhysicsState.stopping:\n                this.accelerate(elapsedMs)\n                break\n            case PhysicsState.turning:\n                this.turn(elapsedMs)\n                break\n            case PhysicsState.cruising:\n                break\n        }\n        this.x += this.velocity.x * elapsedMs\n        this.y += this.velocity.y * elapsedMs\n    }\n\n    get state(): PhysicsState {\n        return this.options.state\n    }\n    set state(state: PhysicsState) {\n        this.options.state = state\n    }\n\n    /**\n     * angle based on velocity in\n     * @returns radians\n     */\n    get angle(): number {\n        if (this.velocity.isZero()) {\n            return this.lastRadians\n        } else {\n            return this.velocity.angle()\n        }\n    }\n\n    get velocity(): Vec2 {\n        return this.options.velocity\n    }\n    set velocity(velocity: Vec2Like) {\n        if (!this.options.velocity.equal(velocity)) {\n            this.options.velocity.copy(velocity)\n            const angle = this.velocity.angle()\n            this.cachedAcceleration.x = Math.cos(angle) * this.acceleration\n            this.cachedAcceleration.y = Math.sin(angle) * this.acceleration\n        }\n    }\n\n    /** current speed */\n    get speed(): number {\n        return this.velocity.magnitude()\n    }\n\n    get acceleration(): number {\n        return this.options.acceleration\n    }\n    set acceleration(acceleration: number) {\n        this.options.acceleration = acceleration\n    }\n\n    get position(): Vec2 {\n        return this.options.position\n    }\n    set position(position: Vec2Like) {\n        this.options.position.copy(position)\n    }\n\n    get maxSpeed(): number {\n        return this.options.maxSpeed\n    }\n    set maxSpeed(maxSpeed: number) {\n        this.options.maxSpeed = maxSpeed\n    }\n\n    get x(): number {\n        return this.options.position[0]\n    }\n    set x(x: number) {\n        this.options.position[0] = x\n    }\n\n    get y(): number {\n        return this.options.position[1]\n    }\n    set y(y: number) {\n        this.options.position[1] = y\n    }\n}"],
  "mappings": "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",
  "names": []
}
